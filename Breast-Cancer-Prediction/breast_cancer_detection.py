# -*- coding: utf-8 -*-
"""Breast Cancer Detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/116J1zZdZe8gAtZESYWcy14yMn5ce6co0

#Importing Libraries
"""

import sys
import scipy
import numpy
import matplotlib
import pandas
import sklearn
import numpy as np
from sklearn.model_selection import cross_validate
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn import model_selection
from sklearn.metrics import classification_report
from sklearn.metrics import accuracy_score
from pandas.plotting import scatter_matrix
import matplotlib.pyplot as plt
import pandas as pd

"""#Loading the Dataset"""

url = "https://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/breast-cancer-wisconsin.data"
names = ['id', 'clump_thickness', 'uniform_cell_size', 'uniform_cell_shape',
       'marginal_adhesion', 'single_epithelial_size', 'bare_nuclei',
       'bland_chromatin', 'normal_nucleoli', 'mitoses', 'class']
df = pd.read_csv(url, names=names)

"""#Preprocessing the Dataset"""

df.replace('?',-99999, inplace=True)
print(df.axes)
df.drop(['id'], 1, inplace=True) #1 means that you are concerned about columns and not rows

"""#Exploring the Dataset"""

print(df.loc[3]) #loc: gets rows (and/or columns) with particular labels, iloc: gets rows (and/or columns) at integer locations.

print(df.shape) #col x row

print(df.describe())

df.hist(figsize = (10, 10))
plt.show()

scatter_matrix(df, figsize = (18,18))
plt.show()

X = np.array(df.drop(['class'], 1))
y = np.array(df['class'])
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

"""#Training the Model"""

seed = 8
scoring = 'accuracy'
models = []
models.append(('KNN', KNeighborsClassifier(n_neighbors = 5)))
models.append(('SVM', SVC()))
print(models)

"""#Evaluate each model"""

results = []
names = []

for name, model in models:
    kfold = model_selection.KFold(n_splits=10, random_state = seed)
    cv_results = model_selection.cross_val_score(model, X_train, y_train, cv=kfold, scoring=scoring) #cv: cross validation splitting strategy
    results.append(cv_results)
    names.append(name)
    msg = "%s: %f (%f)" % (name, cv_results.mean(), cv_results.std())
    print(msg)

"""#Prediction"""

for name, model in models:
    model.fit(X_train, y_train)
    predictions = model.predict(X_test)
    print(name)
    print(accuracy_score(y_test, predictions))
    print(classification_report(y_test, predictions))

